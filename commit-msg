#!/usr/bin/env python

import argparse
import sys
import subprocess


def validate_commit_message():
    """Check if the commit message is a valid one."""
    hook_file, msg_file_path = sys.argv

    commit_msg = open(msg_file_path).read()

    is_valid_email_tag, is_email = check_valid_email_hashtag(commit_msg)
    is_valid_r_notes_tag, is_r_notes = \
        check_valid_release_notes_hashtag(commit_msg)

    if (not is_valid_email_tag
        or not is_valid_r_notes_tag
            or is_release_notes_without_email(is_email, is_r_notes)):
        sys.exit(1)

    check_correct_files_changed(is_email, is_r_notes)
    print(f"Nothing Wrong with commit message!")


def is_release_notes_without_email(is_email, is_release_notes):
    """Check forthe invalid condition of being #release_notes but #no_email"""
    if is_release_notes and not is_email:
        print("Release Notes should go to Email too")
        return True
    return False


def check_valid_email_hashtag(msg):
    '''Check if commit msg has a valid email hashtag'''
    return _has_valid_hashtag(msg, "email")


def check_valid_release_notes_hashtag(msg):
    '''Check if commit msg has a valid release notes hashtag'''
    return _has_valid_hashtag(msg, "release_notes")


def _has_valid_hashtag(msg, tag_base_name):
    """Check if commit message has specific tag by passing the commit message text as 'msg' and
    the tag base name without the '# 'and '#no_' as tag_base_name

    Ex.: _has_valid_hashtag("Blá blá blá #email", "email")
    """
    tag = f"#{tag_base_name}"
    no_tag = f"#no_{tag_base_name}"

    is_tag = str(msg).__contains__(tag)
    is_no_tag = str(msg).__contains__(no_tag)

    if is_tag and is_no_tag:
        print(
            f"\n\nERROR: You can {no_tag} or {tag}, you can't have both\n\n")
        return False, False

    elif is_tag:
        return True, True

    elif is_no_tag:
        return True, False

    elif not is_tag and not is_no_tag:
        print(
            f"""\nERROR: Your commit message need to have one {tag_base_name} hashtag like:
              * {no_tag},
              * {tag}\n""")
        return False, False


def check_correct_files_changed(is_email, is_release_notes):
    '''if is masked with #email and #release_notes check 
    if the correct files were changes along with it too'''
    staged_files = _get_staged_files()

    correct_email = _is_correct_files_updated(
        "email", branch, staged_files) if is_email else True

    is_release_notes_correct = _is_correct_files_updated(
        "release_notes", branch, staged_files) if is_release_notes else True

    if not correct_email or not is_release_notes_correct:
        sys.exit(1)


def _is_correct_files_updated(base_name, branch, staged_files):
    '''Check for given tag if associated branch file was staged
    Ex: base_name=email, branch=dev -> check if next_version_email_dev.md is modified and staged'''
    base_file = f"next_version_{base_name}_{branch}.md"

    if not staged_files.__contains__(['M', base_file]):
        print(
            f"\nERROR: The commit message is marked as #{base_name}, so you must update the file '{base_file}' with information about your implementation.\n")
        return False
    return True


def _get_current_branch():
    '''return the current branch'''
    process = subprocess.Popen(["git", "rev-parse", "--abbrev-ref", "HEAD", "--"],
                               shell=False, stdout=subprocess.PIPE)
    output = process.communicate()[0]
    out_text = str(output).replace("b'", "").replace("'", "").split("\\n")
    out_text = [l.split("\\t") for l in out_text]
    return out_text[0][0]


def _get_staged_files():
    '''return a list of current staged files for this commit'''
    process = subprocess.Popen(["git", "diff", "--cached", "--name-status"],
                               shell=False, stdout=subprocess.PIPE)
    output = process.communicate()[0]
    out_text = str(output).replace("b'", "").replace("'", "").split("\\n")
    out_text = [l.split("\\t") for l in out_text]
    return out_text


if __name__ == "__main__":
    validate_commit_message()
